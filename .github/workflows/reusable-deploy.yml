name: Reusable Build & Deploy

on:
  workflow_call:
    inputs:
      service_name: { required: true, type: string }
      docker_context: { required: true, type: string }
      dockerfile: { required: false, type: string, default: Dockerfile }
      image_name: { required: true, type: string }
      environment: { required: true, type: string }   # dev or prod
      namespace: { required: true, type: string }
      deploy: { required: false, type: boolean, default: true }

permissions:
  contents: read
  deployments: write

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RG }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}

jobs:
  build:
    name: Build & Push ${{ inputs.service_name }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency:
      group: deploy-${{ inputs.environment }}-${{ inputs.service_name }}
      cancel-in-progress: true
    outputs:
      image_tag: ${{ steps.meta.outputs.tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute image tag
        id: meta
        run: echo "tag=${GITHUB_SHA}-${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

      - name: ACR login
        shell: bash
        run: |
          ACR_NAME="${ACR_LOGIN_SERVER%%.*}"
          echo "Logging into $ACR_NAME"
          az acr login --name "$ACR_NAME"

      - name: Build & push image (with cache)
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.docker_context }}
          file: ${{ inputs.docker_context }}/${{ inputs.dockerfile }}
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ inputs.image_name }}:${{ steps.meta.outputs.tag }}
            ${{ env.ACR_LOGIN_SERVER }}/${{ inputs.image_name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  deploy:
    name: Deploy ${{ inputs.service_name }} to ${{ inputs.environment }}
    needs: build
    if: ${{ inputs.deploy }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: AKS set context
        uses: Azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

      - name: Ensure namespace exists
        run: kubectl create namespace "${{ inputs.namespace }}" || true

      - name: Apply/Update deployment
        shell: bash
        run: |
          set -e
          DEPLOY="${{ inputs.service_name }}"
          IMAGE="${{ env.ACR_LOGIN_SERVER }}/${{ inputs.image_name }}:${{ needs.build.outputs.image_tag }}"
          if kubectl -n "${{ inputs.namespace }}" get deploy "$DEPLOY" >/dev/null 2>&1; then
            kubectl -n "${{ inputs.namespace }}" set image "deployment/$DEPLOY" "$DEPLOY=$IMAGE" --record
          else
            cat <<YAML2 | kubectl apply -n "${{ inputs.namespace }}" -f -
            apiVersion: apps/v1
            kind: Deployment
            metadata: { name: $DEPLOY, labels: { app: $DEPLOY } }
            spec:
              replicas: 1
              selector: { matchLabels: { app: $DEPLOY } }
              template:
                metadata: { labels: { app: $DEPLOY } }
                spec:
                  containers:
                  - name: $DEPLOY
                    image: $IMAGE
                    ports: [{ containerPort: 80 }]
            ---
            apiVersion: v1
            kind: Service
            metadata: { name: $DEPLOY, labels: { app: $DEPLOY } }
            spec:
              type: ClusterIP
              selector: { app: $DEPLOY }
              ports:
              - port: 80
                targetPort: 80
            YAML2
          fi

      - name: Verify rollout
        run: kubectl -n "${{ inputs.namespace }}" rollout status deploy/${{ inputs.service_name }} --timeout=120s
