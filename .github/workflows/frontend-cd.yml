# week08/.github/workflows/frontend-cd.yml

name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to deploy (default: latest)"
        required: false
        default: "latest"

env:
  NAMESPACE: ""   # leave empty to use default namespace

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Derive ACR + tag
        run: |
          echo "ACR_LOGIN_SERVER=${{ secrets.ACR_LOGIN_SERVER }}" >> $GITHUB_ENV
          echo "TAG=${{ github.event.inputs.image_tag || 'latest' }}" >> $GITHUB_ENV

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ secrets.AKS_RG }}
          cluster-name:   ${{ secrets.AKS_CLUSTER }}

      # Harmless if already attached; don't fail the job if it is.
      - name: Attach ACR permissions (best effort)
        run: |
          ACR_NAME=$(echo "${ACR_LOGIN_SERVER}" | cut -d. -f1)
          az aks update -n "${{ secrets.AKS_CLUSTER }}" -g "${{ secrets.AKS_RG }}" --attach-acr "$ACR_NAME" || true

      - name: Ensure namespace (optional)
        if: env.NAMESPACE != ''
        run: |
          kubectl get ns "$NAMESPACE" || kubectl create ns "$NAMESPACE"

      - name: Ensure frontend Deployment & Service
        run: |
          if [ -f k8s/frontend.yaml ]; then
            kubectl ${NAMESPACE:+-n $NAMESPACE} apply -f k8s/frontend.yaml
          elif [ -d k8s/frontend ]; then
            kubectl ${NAMESPACE:+-n $NAMESPACE} apply -f k8s/frontend/
          else
            kubectl ${NAMESPACE:+-n $NAMESPACE} apply -f - <<'YAML'
            apiVersion: apps/v1
            kind: Deployment
            metadata: { name: frontend }
            spec:
              replicas: 1
              selector: { matchLabels: { app: frontend } }
              template:
                metadata: { labels: { app: frontend } }
                spec:
                  containers:
                    - name: frontend
                      image: nginx:alpine   # replaced below with your ACR image
                      ports: [ { containerPort: 80 } ]
                      readinessProbe: { httpGet: { path: /, port: 80 }, initialDelaySeconds: 5, periodSeconds: 10 }
                      livenessProbe:  { httpGet: { path: /, port: 80 }, initialDelaySeconds: 10, periodSeconds: 20 }
            ---
            apiVersion: v1
            kind: Service
            metadata: { name: frontend }
            spec:
              type: LoadBalancer
              selector: { app: frontend }
              ports: [ { port: 80, targetPort: 80 } ]
            YAML
          fi

      - name: Set image to ACR tag and rollout
        run: |
          IMG="${ACR_LOGIN_SERVER}/frontend:${TAG}"
          kubectl ${NAMESPACE:+-n $NAMESPACE} set image deploy/frontend frontend="$IMG" --record || true
          kubectl ${NAMESPACE:+-n $NAMESPACE} rollout status deploy/frontend --timeout=240s || true

      - name: Show services
        run: kubectl ${NAMESPACE:+-n $NAMESPACE} get svc -o wide
